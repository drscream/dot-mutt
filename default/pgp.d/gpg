## commands, gpg
  set pgp_clearsign_command = "gpg --no-verbose --batch --quiet --output - --passphrase-fd 0 --armor --textmode --clearsign %?a?-u %a? %f" # create a application/pgp signed (old-style) message
  set pgp_decrypt_command = "gpg --passphrase-fd 0 --no-verbose --quiet --batch --output - %f" # decrypt a pgp/mime attachment
  set pgp_decode_command = "gpg %?p?--passphrase-fd 0? --no-verbose --quiet --batch --output - %f" # decode application/pgp (fix characters with utrac | utrac)
  set pgp_encrypt_only_command = "pgpewrap gpg --batch --quiet --no-verbose --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f" # create a pgp/mime encrypted attachment
  set pgp_encrypt_sign_command = "pgpewrap gpg --passphrase-fd 0 --batch --quiet --no-verbose --textmode --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f" # create a pgp/mime encrypted and signed attachment
  set pgp_export_command = "gpg --no-verbose --export --armor %r" # export a key from the public key ring
# set pgp_getkeys_command = "pkspxycwrap %r" # fetch keys
unset pgp_getkeys_command
  set pgp_good_sign = "`gettext -d gnupg -s 'Good signature from "' | tr -d '"'`" # pattern for good signature
  set pgp_import_command = "gpg --no-verbose --import -v %f" # import a key into the public key ring
  set pgp_list_pubring_command = "gpg --no-verbose --batch --quiet --with-colons --list-keys %r" # read in the public key ring
  set pgp_list_secring_command = "gpg --no-verbose --batch --quiet --with-colons --list-secret-keys %r" # read in the secret key ring
  set pgp_sign_command = "gpg --no-verbose --batch --quiet --output - --passphrase-fd 0 --armor --detach-sign --textmode %?a?-u %a? %f" # create a pgp/mime signed attachment
  set pgp_verify_command = "gpg --no-verbose --quiet --batch --output - --verify %s %f" # verify a pgp/mime signature
  set pgp_verify_key_command = "gpg --no-verbose --batch --fingerprint --check-sigs %r" # verify a key

## settings, gpg
  set pgp_use_gpg_agent

# vim:ft=muttrc:
